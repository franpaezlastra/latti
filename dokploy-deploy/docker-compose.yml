version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: latti_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-latti_stock}
      POSTGRES_USER: ${POSTGRES_USER:-latti_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-latti_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - latti_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-latti_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Spring Boot
  backend:
    image: ghcr.io/${GITHUB_USERNAME:-franc}/latti:latest
    container_name: latti_backend_prod
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-latti_stock}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-latti_user}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-latti_secure_password}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SERVER_PORT: 8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - latti_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: latti_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - latti_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  latti_network:
    driver: bridge
